#!/usr/bin/env node

/**
 * Module dependencies.
 */
const App = require('../app');
const Debug = require('debug')('huadi:server');
const HTTP = require('http');
const config = require('../config/config');
console.log('Server is starting...');
/******************  HTTP配置 start ******************/
/**
 * Get port from environment and store in Express.
 */
const PORT = normalizePort(process.env.PORT || config[config.current].port);
App.set('port', PORT);

/**
 * Create HTTP server.
 */

const httpServer = HTTP.createServer(App);
/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(PORT);
httpServer.on('error', onError);
httpServer.on('listening', onListening);
console.log('Server is listening on ' + PORT + '...');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof PORT === 'string'
        ? 'Pipe ' + PORT
        : 'Port ' + PORT;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = httpServer.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    Debug('Listening on ' + bind);
}
/******************  HTTP配置 end ******************/
